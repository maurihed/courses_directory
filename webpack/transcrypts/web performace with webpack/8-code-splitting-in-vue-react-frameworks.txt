[00:00:00]
>> Connor: I remember you said something yesterday about how it's specific based on what framework you're using too. Code splitting gets more complicated with, say-
>> Sean Larkin: It's very true, yes.
>> Connor: Are you gonna dive into that at all later?
>> Sean Larkin: I can give, I think it's fair for me to show an example of what that means.

[00:00:21]
So like some, yeah, go ahead.
>> Speaker 3: It was just more questions.
>> Sean Larkin: Okay, okay. So you're absolutely right. There are some frameworks and some libraries that,
>> Sean Larkin: How do I say this? Disregarded webpack as an important tool that people use, and therefore missed the opportunity to make lazy loading a first class citizen for them.

[00:00:48]
And therefore it's a painful experience to have a performing application. A great example of that is like angular. It takes about 14 files to even lazy load something, and then it will even support component by component lazy loading. You have to technically fake a router outlet to even do it.

[00:01:09]
And so it's like when you don't respect the contextual things, like what are people using as a bundler, or if you don't make code splitting your first class citizen, you make it really hard for your users to be able to create performance web applications, right? But on the other hand, we have projects like, I'll just open an example, cuz I think it's super important to showcase.

[00:01:41]

>> Sean Larkin: Let's see.
>> Sean Larkin: Where we have vue.js. Where's that great example that I used to have? Let's look in my 30 card folders. Let's see, view demo I think is fine.
>> Sean Larkin: The most beautiful thing about vue.js, I'll just give a very quick context. So long story short, so vue has a single file component system.

[00:02:16]
I'll even say that they decide to build on webpack as a platform when they created their features. Single file components are powered by a webpack loader, it's vue loader. And what they get is that it allows them to write a single, you get to write a single components style.

[00:02:33]
Its scope and data, and it's templating in a single file. The context is really nice. If you wanna use one custom component in another, you have to register it. Now to do so, you just import it like it's a module, right? Because behind the scenes, the loader converts all of this to ESN modules.

[00:02:53]
So when I say code splitting is a first class citizen, I mean that, well, to register that component, you would import it and then you take that imported reference and you just bind it here in components. It's just a destructure syntax. So now that I've set this here, I'm able to actually use this hello world component as seen above in my custom template.

[00:03:16]
Does that make sense so far? And don't sweat too much about the view syntax. Just think about this is an API for registering components, right? So when Evan You created this, he said, well, not only can you take a component, like if I was to use an interface for this and said, I like using interfaces because now that I do some typing stuff, I feel it makes sense to me.

[00:03:42]
So if I said interface,
>> Sean Larkin: RegisteredComponent, what it means is it takes an instance of component or the component's property here, takes a component or it takes a function that returns a promise that resolves a component. So what does that mean? So it means that I literally can comment this line, uncomment this line as long as this is named the same thing.

[00:04:17]
Wow, I just code split this component. With one line change, one line. You just instantly made it possible for this to be loaded asynchronously. And what's the power? Sean, why does that matter? So for example, if this state here. So if you wanted to bind state. I don't even want, please don't stress about the syntax itself.

[00:04:46]
Let's say some state is false. And,
>> Sean Larkin: V-if is very similar AngularJS directives, right? And it compiles down to render functions, like ReactOS. So if this is false, this component never gets loaded, right? Because what it's equal to is a function that returns the promise. So when at runtime, this state evaluates to true, let's say some event changes it.

[00:05:23]
Vue calls the function, which then go fetches the bundle that has the component. This is first class code splitting. There is no other framework today that does this. And it's almost ironic that another grassroots organization that serves nothing but its users, like Vue, has a really great integration with another grassroots open source project that serves nobody but its users, like webpack.

[00:05:54]
So just something you think about when you choose your technologies in the future. Anyways, I'm biased. I'm biased. But yes, this is first class code splitting. This is what excites me because I see libraries and frameworks of the future building on this. This means that at any time you could slap an app together with static imports and then go back one line at a time and refactor everything to be high-performing.

[00:06:20]
So this is first-class code splitting. There are other examples of doing this in other libraries. So if you were using react, there is react-loadable. It's made by Jamie Builds, or Jamie Kyle, he goes by now. And essentially what this does is now it's a little bit more boilerplate.

[00:06:42]
It's not a first class experience. It's very close, though, is that you can take and just import loadable. And then if you had a loader icon or spinning icon, it allows you to bind that as well. But you create this component and you can see here a function that returns a dynamic import, right, of your react component that you wanna lazy load.

[00:07:04]
And then all you have to do is return that in your render function. Does that make sense? To people who know JSX, they're like, yeah, this looks really clear. To me, I'm just like [LAUGH] I'm like, okay, cool. Yeah, so this is the only really convenient way I know how to do it with react.

[00:07:26]
So that's what I mean when I say, hopefully that answers your question. I kinda rambled and got a little soapboxy there for a moment, Connor, but it's gonna differ for each library.
>> Connor: Pretty concise. So in the spectrum of ease, Vue by far the easiest to do code splitting,

[00:07:44]

>> Sean Larkin: By far.
>> Connor: React somewhere in the middle, Angular.
>> Sean Larkin: It is ncredibly painful, yeah, both for the component level. I would say for routing, they have it pretty well, but a lot of the times you can't just split at the route level. You should be doing all your temporal components, like what super cool is in the future.

[00:08:02]
I see us having tools and utilities that see like, this is a conditionally loaded component. Behind the scenes let's just try to convert this to a dynamic import, right? Hopefully we see that, but you're right, absolutely. Vue by far, and there are, I'm trying to work with teams, like Preact and like even Hyperapp, if you've ever seen Hyperapp, it's a tiny, tiny version, like smaller than Preact.

[00:08:29]
They have a really cool API, and so I've been trying to tell them, hey, can you make first class code splitting? I'm trying to work with these newer frameworks that look like they could take off, because really, it's 11 lines of code in your own internal library to handle.

[00:08:44]
All you have to say is, is type of this a function or is it a component instance? If it's a type of function, resolve the promise.

