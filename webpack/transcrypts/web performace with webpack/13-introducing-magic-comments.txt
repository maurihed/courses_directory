[00:00:01]
>> Sean Larkin: So now let's talk about Magic Comments. So magic comments is, when we talk about magic comments, it's specifically for the dynamic import statement. So I actually wanna pull up the documentation, cuz I think it's really well written in terms of what is going to explain to you.

[00:00:19]
So if you went to, and if you wanna bookmark this, I would encourage it. It's a great resource. So we go to have a leaf documentation, and then guides. No, I'm sorry API, and then module methods. So this actually shows you all of the module methods we support, right?

[00:00:40]
So not only just Export, there's a common JS, we even show the AMD ones, like everything, which is really cool. Even the proprietary ones that are webpacky, that you can choose to use. There's even some for like server-side rendering, I don't think we'll have time to talk about server side rendering stuff, but this feature literally was designed for server cyber nine in.

[00:01:13]
Anyways, so let's jump to magic comments.
>> Sean Larkin: I think [LAUGH], where do we have it, okay. Here we go, so,
>> Sean Larkin: One of the things that you'll notice, is that when we use code splitting as a technique, there is no name that is created when you add the bundle, right?

[00:01:39]
Because it's not an entry point, and so we can't give it some assigned name. And therefore, we used to be able to do this with require.insure, and people really liked it, because when you have, let's say, in our code base, we have now, if we run a Prog-Build.

[00:02:01]
Prod, we look at our folder here, we're gonna notice that we have a whole bunch of files that like, you're, well, what's what? What is which feature? It's a little harder to debug, and so, not as friendly for debugging in developer experience, right, and we also wanted to have a little bit more control over how we could split.

[00:02:26]
And so, we added this feature called magic comments. And simply what it is, is adding a comment before the paths of the module that you're dynamically importing. So as seen here,
>> Sean Larkin: And you can add additional features. Specific to what the bundle is, or what modules get thrown into a bundle.

[00:02:48]
Now, the one that's really popular is the web pack chunk name. So this is really great, if you wanna be able to name or label one of these lazy little bundles. So why don't we go and just add this to one of our dynamic imports.
>> Sean Larkin: So we know that we have GIT folders equals functions that returns the dynamic import, and we can add,

[00:03:17]

>> Sean Larkin: A comment here, in kinda like the JS doc style, webpackChunkName, and I don't think we wrap it in quotes, right? No, we only do it for the second piece. And we would say, like I would say, footer. So this is going to allow Webpack to have some sort of heuristic that doesn't conflict with the dynamic loader speck or the web wg loader speck, we into allow you to still have the features that you would get from require ensure, but not break people's code, and make it not standard approved.

[00:03:55]
So that's why they're comments. And so, it's kind of a trade off, and the decision we have to make. And so, let's build our production build, so to allow this to be visible, we do have to make a slight configuration change. Least as far as I know, unless this feature is broken.

[00:04:21]
So you'll be like Shawn, how come you don't know this? It's typically I don't use this feature a lot, myself. Other people find it incredibly valuable. So we would want to say, output.chuckfilename. Chuck file name, and I believe we'd wanna set name. So I actually use a special powdering.

[00:04:44]
So when you wanna have a naming powder for your lazy loaded chunks, like what we did for Mutual of Omaha, is that I actually decorate them as lazy chunk.js. That way I know when I look at any production code, I'm like, this a lazy loaded bundle. I believe we can add the name helper template.

[00:05:15]

>> Sean Larkin: There you go. So now, we have footer.lazy-chunk.js.
>> Sean Larkin: And if you didn't want to, let's say you're like, okay, I value this all the time. Then you could keep it in your base configuration. Some people choose, I think it was a, think it was housing, maybe it was flip card.

[00:05:43]
It was one of those, where they only did this for production, cuz it's easier to. I'm sorry, only did it for development. But I mean, but that's exactly how you would use the magic comments there. Webpack join name, there you go. I'll make this even larger. There we go, ginormous.

[00:06:07]
And I'll jump back to it, yes. So since Webpack 2.6, we've had this feature.

