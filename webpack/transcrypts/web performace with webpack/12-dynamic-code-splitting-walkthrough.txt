[00:00:00]
>> Sean Larkin: So, yeah, exercise time.
>> Sean Larkin: So let's go ahead, and I'll take and I'll check this, I'm just gonna check out a branch really quick. But what I want you to do while I'm doing this is take and let's add, let's say I think a great example would be to leverage button styles, right?

[00:00:22]
Let's just say instead, go ahead and create a folder called button-styles, well, we'll just do it together.
>> Sean Larkin: And inside of it, create a module. One is red.js, one is blue.js, each of the colors, so red.js, blue.js, green.js, yellow.js. Okay, that seems pretty good, that's fair. Okay, now let me just, let me stop where we were at and check this code in, so let's see.

[00:01:19]

>> Sean Larkin: Check out,
>> Sean Larkin: 0501,
>> Sean Larkin: Get,
>> Sean Larkin: Awesome, okay, so, beautiful, hopefully that push is great, okay, so back to where we were. Now let's take button-styles.js, and really, what we're just gonna do here is, each of them will just be a default export that kinda uses this pattern, right?

[00:02:03]
So we'll keep this existing module in, cuz we don't wanna break where we're at right now. But we could even start our dev mode, right, and get the incremental changes and feedback from webpack as we're trying to do this.
>> Sean Larkin: So blue would be default, or export default,

[00:02:25]

>> Sean Larkin: "color: blue", all right, seems kinda nice. Got a little duplication here, I mean, a little repetition. But I just wanna make this easy to understand. Color red, then color yellow.
>> Sean Larkin: Here we go.
>> Sean Larkin: And so once you've created these four, let's jump back up into our index, and let's see where we have applied it.

[00:03:07]
So typically, we're applying it, let's see, from,
>> Sean Larkin: I think what's kind of cool is, maybe we should do it inside of the onClick, right? So when we click on the button, let's set a new color style, that's pretty nice. And we could still use the existing module, right, to set our initial.

[00:03:27]
And so what we're gonna do now is, we need to conditionally load this. So we are going to write a function that says setButtonStyle, right? It can be anything you want, but we'll say setButtonStyle equals a function that returns a dynamic import, right? And so we need to provide webpack with information to know where to resolve these modules.

[00:03:56]
So we're gonna do path to button-styles, and we do need to use template strings. Now, you can do concatenation of strings, I just think this is so much more convenient to use, like the back ticks. Oops, what's interpolation, again, there we go.
>> Sean Larkin: Color, or we can say color, these variables can be named whatever you want.

[00:04:31]

>> Sean Larkin: Okay, now when we save this, you may have noticed in your first rebuild, you instantly get four more bundles created, right? And they're tiny, cuz it's a small module, but that's great, let's now actually use it. So we can say,
>> Sean Larkin: getButtonStyle, was it setButtonStyle, there we go, setButtonStyle, and once again, it is just a promise.

[00:05:04]
But now we can actually provide the color, so I'm just gonna say ("red").then. And then we can say stylename or style.
>> Sean Larkin: And then button.style = style.
>> Sean Larkin: I almost feel like it's easier to say style string, I just hate seeing like the same name here.
>> Sean Larkin: Now let's jump into, we can pull up the dev server, if you don't have it loaded.

[00:05:52]

>> Sean Larkin: Reload our page, hey, doesn't look very red.
>> Sean Larkin: What I should do is actually console.log this, so we can see what actually this value is, style string.
>> Sean Larkin: All right, so let's jump into our console. This is that debug driven, if you're not very sure, what is it actually set to, right?

[00:06:25]

>> Sean Larkin: The default is color red. So looks like I just need to access the default, right, I always get thrown off from this. Export default, color red, default, okay. So I would technically, what's even cool is that you can set a debugger statement here. So this is probably one of my favorite parts, is now I can hit this.

[00:06:46]
I can stop and I can literally just see what this statement is. So it looks like instead of just calling the style string, I should be saying styleStr.default, right, so.
>> Sean Larkin: At least that's what it looks like here.
>> Sean Larkin: So maybe this is a case where it's like, maybe I should, I'm just gonna rebuild.

[00:07:14]

>> Sean Larkin: I love using debuggers when it comes to code splitting cuz it's like, cool, now I can inspect everything that I have here. Step through, watch it get set, boom.
>> Sean Larkin: Instantly based on runtime conditions, well, I mean you could set some random runtime conditions. Say, if window,whatever, or at event listener at some event.

[00:07:41]
But what's cool is that we didn't actually need any of the other lazy loaded chunks, right? They're created and they're provided there in case they're called. But the value is, we only needed to use this one, and therefore, that's what got loaded up. And you can reuse this in your code now, you can have this as an individual module that you pull in and pass anywhere.

[00:08:09]
The key thing about using this kind of dynamic code splitting is that you always have to pass in information like partial path to know, webpack won't know if this is just a variable. I'll just say color, and this is gonna error, I'll get a warning that says, hey, the request of a dependency is an expression.

[00:08:30]
The point, what this is trying to explain, we need to make this easier to understand, this warning message. But the point here is, and you'll learn a little bit as I talk about how webpack works under the hood. But if webpack has to resolve a dependency, what can it resolve when you just pass it a variable?

[00:08:48]
It doesn't even know where to look and find the code, right? So it has to do it statically, and that's what the partial path is aiming to provide. So does anyone have any questions before I move on to magic comments?
>> Sean Larkin: Well, I think this is a really awesome technique.

[00:09:07]
I think maybe before we move on, the only other thing I would say is, now this expression right here, what webpack does is, it just uses a regex and separates them out. And says, okay, this is the partial path, and then I'm looking for this. Now you can even do something like this where if you said .js.

[00:09:27]
If you had a folder that had a bunch of other assets in there, webpack would try and resolve those and create bundles for them, right, especially if you had the loader to support it. So adding the .js would filter it and say, only resolve the .js files. And that's what I think is the coolest thing.

[00:09:46]
For example, we support JSON out of the box, right, and JSON is, by default, resolvable. So if I put in here, I actually think this is really cool too because these wouldn't even need to be JavaScript files if they're just strings, right? You could literally say magenta, or no, let's just say pink, pink.json.

[00:10:08]

>> Sean Larkin: And let's see if my index, okay, yes, so that's right.
>> Sean Larkin: And I'm just gonna reload the dev server. Okay, so if you had pink.json in here, [LAUGH] replace of undefined. I've never seen that error before.
>> Sean Larkin: Yeah, because there is no json in it, sorry. And if I said,

[00:10:41]

>> Sean Larkin: I think if I said default, right?
>> Sean Larkin: And then I said, let's see what the color pink,
>> Sean Larkin: [LAUGH] it added another lazy loaded bundle, right? I'll just redo the dev so we don't see just the incremental update, we'll see all of the bundles initially created.
>> Sean Larkin: Look, now you have another one right, because, webpack by default can resolve json, web assembly, .mjs and js.

[00:11:24]
Those are the four extensions that it supports, and so it's gonna resolve this because there is no partial path. And so if we jump into our dev mode, and I actually tried to call this, or maybe I'll jump into, here we go. If I said set button color pink,

[00:11:44]

>> Sean Larkin: Instead, let's see what happens.
>> Sean Larkin: So we get a reload, and then okay, great. I hit the button, I get a breakpoint, and look at what we have in here. We actually have the default, if I console log it, style string.
>> Sean Larkin: So it looks like I could just have it be, now with JSON, it's a little different cuz we force everything into default name space, and so each property is its own export.

[00:12:23]
So in this case, we have a named import of default, but look, you can do that. And so the point is that you can be more strict about your filters, and you can say, webpack, don't try and resolve this and create a lazy loaded bundle for it, okay.

[00:12:39]
If I just set it to JS, then it's not gonna emit every single bundle for it.
>> Sean Larkin: So that's how you just make your context resolving more strict.
>> Sean Larkin: So that I think is probably one of the coolest capabilities, is that you can be really expressive with it, even though it's not truly dynamic.

[00:13:08]
So okay, I'm just gonna commit this really quick and then we're gonna talk about magic comments. That was something that I saw a lot on our feedback. So git add source.
>> Sean Larkin: 0502-context, okay, let's see, not-so-dynamic-code-splitting.
>> Sean Larkin: Okay.

